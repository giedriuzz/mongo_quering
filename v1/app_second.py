from pymongo import MongoClient
from pymongo.errors import WriteError
import maskpass
import lorem
import time
import json
from collections import OrderedDict
from typing import List, Dict, Any
from app import DatabaseDataGenerator
from connect.connect import ConnectToRpi4


# user_name = input("Enter your username: ")
# password = maskpass.askpass(prompt="Enter your password: ", mask="*")
user_name = "ufo"
password = "pempiai234"
host = "192.168.1.81"  # ip of RPI4
port = 27017
# db_name = input("Enter name of database: ")
# collection_name = input("Enter name of collection: ")
db_name = "elevatorapp"
collection_name = "daily_work"


db = ConnectToRpi4(
    user_name=user_name,
    user_passwd=password,
    host=host,
    port=port,
    db_name=db_name,
    collection_name=collection_name,
)


class QueryingPartTwo:
    def __init__(
        self,
        base: ConnectToRpi4,
    ) -> None:
        uri = "mongodb://%s:%s@%s:%s/" % (
            base.user_name,
            base.user_passwd,
            base.host,
            base.port,
        )
        self.db_name = base.db_name
        self.client = MongoClient(uri)
        self.db = self.client[base.db_name]
        self.collection = self.db[base.collection_name]

    def create_database_many_records(self, record: list) -> str:
        """Create many records from list of dictionaries
        dict_1 = {name:value, etc}
        dict_2 = {name:value, etc}
        function([dict_1, dict_2]) or function([{name:value, etc}, {name:value, etc}])
        """
        try:
            result = self.collection.insert_many(record)
            return str(result.inserted_ids)
        except WriteError as e:
            return f"Not passed validation scheme one of fields! Error code: {e}"

    def create_database_one_record(self, record) -> str:
        try:
            result = self.collection.insert_one(record)
            return str(result.inserted_id)
        except WriteError as e:
            return f"Not passed validation scheme one of fields! Error code: {e}"

    def filter_by_greater_than_equal(self, field_name: str, value: int) -> List[dict]:
        """$gte	It will match all the values that are greater than or equal to a specified value."""
        query = {field_name: {"$gte": value}}
        result = self.collection.find(query)
        return list(result)

    def filter_by_less_than_equal(self, field_name: str, value: int) -> List[dict]:
        """$lte	It will match all the values that are less than or equal to a specified value."""
        query = {field_name: {"$lte": value}}
        result = self.collection.find(query)
        return list(result)

    def filter_by_in(self, field_name: str, value: List[int]) -> List[dict]:
        query = {field_name: {"$in": value}}
        result = self.collection.find(query)
        return list(result)

    def filter_by_not_in(self, field_name: str, value: List[int]) -> List[dict]:
        query = {field_name: {"$nin": value}}
        result = self.collection.find(query)
        return list(result)

    def filter_fields(self, keys_values) -> List[dict]:
        query = {**keys_values}
        result = self.collection.find_one({}, query)
        return list(result)

    def define_schema_validation_rules(self, schema_json: Any, db_name: str) -> str:
        """function for define schema validation rules.
            JSON file can be stored where you want, just give a Relative Path:
            config_file = (
            "/home/user/Documents/code_academy_projects/cafeteria/connect/schema_json.json"
        )
        """
        with open(schema_json, "r") as f:
            schema_json = json.loads(f.read())
        load_validation_schema = OrderedDict(schema_json)
        data_base = self.client[db_name]
        data_base.command(load_validation_schema)
        return f"Schema validation rules was successfully applied!"


if __name__ == "__main__":
    querying = QueryingPartTwo(db)
    gen = DatabaseDataGenerator()

    daily_work = "/home/giedrius/Documents/code_academy_projects/elevator_company/validation_schema_json/daily_work.json"
    elevator = "/home/giedrius/Documents/code_academy_projects/elevator_company/validation_schema_json/elevator.json"
    technician = "/home/giedrius/Documents/code_academy_projects/elevator_company/validation_schema_json/technician.json"

    querying.define_schema_validation_rules(elevator, "elevatorapp")
    querying.define_schema_validation_rules(technician, "elevatorapp")

    # # equals_or_more = querying.filter_by_greater_than_equal(
    # #     field_name="manufacturer_number", value=1
    # # )
    # # # print("Equal or more ------>", equals_or_more, end="\n")
    # # list_of_elevators = []
    # # for i in equals_or_more:
    # #     list_of_elevators.append(i["manufacturer_number"])
    # # print(list_of_elevators)
    # list_of_levators_numbers = [
    #     2244,
    #     18405,
    #     1125,
    #     94653,
    #     56677,
    #     1508,
    #     77646,
    #     93916,
    #     18304,
    #     56291,
    #     71035,
    #     28291,
    #     32246,
    #     75458,
    #     15355,
    #     82964,
    #     76823,
    #     57338,
    #     94320,
    #     62127,
    #     64176,
    #     20942,
    #     3431,
    #     13678,
    #     67211,
    #     45558,
    #     8765,
    #     61390,
    #     57819,
    #     5820,
    #     3598,
    #     64410,
    #     16652,
    #     60615,
    #     94519,
    #     65338,
    #     16514,
    #     9374,
    #     8725,
    #     16467,
    #     57252,
    #     62097,
    #     28546,
    #     77981,
    #     56297,
    #     65567,
    #     77182,
    #     6460,
    #     7287,
    #     74890,
    #     4955,
    #     75556,
    #     46581,
    #     544,
    #     87502,
    #     23020,
    #     74416,
    #     28391,
    #     65150,
    #     6603,
    #     45503,
    #     58394,
    #     50429,
    #     15929,
    #     49969,
    #     65607,
    #     19597,
    #     30492,
    #     47380,
    #     79785,
    #     93548,
    #     43950,
    #     92451,
    #     49778,
    #     67986,
    #     55806,
    #     99502,
    #     89049,
    #     88210,
    #     77423,
    #     76416,
    #     83462,
    #     59079,
    #     80246,
    #     40559,
    #     77498,
    #     56851,
    #     75247,
    #     78495,
    #     66781,
    #     37920,
    #     96733,
    #     83802,
    #     31172,
    #     73385,
    #     97516,
    #     96263,
    #     78595,
    #     35670,
    #     87224,
    #     95350,
    #     66255,
    #     77676,
    #     57663,
    #     75090,
    #     61425,
    #     92845,
    #     52629,
    #     36402,
    #     44419,
    #     47049,
    #     54727,
    #     82944,
    #     94911,
    #     60784,
    #     96227,
    #     66670,
    #     83796,
    #     92070,
    #     95231,
    #     91198,
    #     64052,
    #     32794,
    #     57941,
    #     83731,
    #     58845,
    #     90392,
    #     66323,
    #     95209,
    #     66747,
    #     70110,
    #     30707,
    #     75761,
    #     40516,
    #     90084,
    #     55132,
    #     70314,
    #     76295,
    #     41768,
    #     38762,
    #     94553,
    #     50853,
    #     82506,
    #     31965,
    #     69439,
    #     50370,
    #     81121,
    #     71668,
    #     94874,
    #     59414,
    #     41781,
    #     63397,
    #     76367,
    #     75196,
    #     40995,
    #     84885,
    #     72375,
    #     92959,
    #     59690,
    #     35085,
    #     46094,
    #     94107,
    #     92890,
    #     36705,
    #     64971,
    #     72697,
    #     55754,
    #     94621,
    #     74651,
    #     57103,
    #     76090,
    #     79839,
    #     39643,
    #     45262,
    #     82609,
    #     46965,
    #     50157,
    #     67227,
    #     82327,
    #     80245,
    #     71598,
    #     59099,
    #     76360,
    #     91210,
    #     84017,
    #     89855,
    #     77864,
    #     65728,
    #     76370,
    #     62087,
    #     73474,
    #     79098,
    #     90035,
    #     43125,
    #     32258,
    #     62531,
    #     31590,
    #     55904,
    #     76153,
    #     31606,
    #     68716,
    #     98397,
    #     96814,
    #     34555,
    #     62006,
    #     97909,
    #     45066,
    #     62190,
    #     80491,
    #     72787,
    #     37025,
    #     49256,
    #     81275,
    #     48724,
    #     44873,
    #     69729,
    #     53211,
    #     83338,
    #     32746,
    #     72961,
    #     67201,
    #     42978,
    #     74307,
    #     44607,
    #     94344,
    #     35531,
    #     75778,
    #     59531,
    #     51131,
    #     57225,
    #     33507,
    #     45141,
    #     42868,
    #     41704,
    #     48068,
    #     73815,
    #     38635,
    #     51522,
    #     69673,
    #     30335,
    #     51517,
    #     49896,
    #     66358,
    #     77753,
    #     69546,
    #     45454,
    #     31887,
    #     41342,
    #     89466,
    #     78649,
    #     93365,
    #     47617,
    #     86055,
    #     97818,
    #     50336,
    #     78369,
    #     63993,
    #     86593,
    #     38857,
    #     37396,
    #     42450,
    #     69172,
    #     40100,
    #     41179,
    #     66203,
    #     53904,
    #     81319,
    #     41747,
    #     35100,
    #     71877,
    #     97137,
    #     89306,
    #     94074,
    #     92514,
    #     46488,
    #     39258,
    #     68895,
    #     79271,
    #     77698,
    #     72864,
    #     52403,
    #     99225,
    #     71707,
    #     45779,
    #     76588,
    #     93668,
    #     75163,
    #     77568,
    #     35745,
    #     83660,
    #     69601,
    #     99525,
    #     61147,
    #     88060,
    #     88139,
    #     91835,
    #     68002,
    #     71888,
    #     48078,
    #     45767,
    #     97714,
    #     74314,
    #     37814,
    #     80424,
    #     54104,
    #     76428,
    #     63105,
    #     48194,
    #     75949,
    #     87371,
    #     66345,
    #     53104,
    #     32136,
    #     75847,
    #     41408,
    #     67337,
    #     53391,
    #     52939,
    #     47644,
    #     78597,
    #     77743,
    #     40581,
    #     81237,
    #     99759,
    #     50047,
    #     74266,
    #     63203,
    #     92803,
    #     78820,
    #     37342,
    #     73293,
    #     53120,
    #     95980,
    #     48600,
    #     94835,
    #     85295,
    #     80415,
    #     82072,
    #     35996,
    #     53947,
    #     81684,
    #     78942,
    #     99929,
    #     93340,
    #     58118,
    #     61302,
    #     52163,
    #     37480,
    #     95717,
    #     60025,
    #     73786,
    #     56501,
    #     40925,
    #     96149,
    #     33195,
    #     34713,
    #     59487,
    #     87469,
    #     91365,
    #     37519,
    #     61060,
    #     98068,
    #     33917,
    #     34415,
    #     41750,
    #     80059,
    #     38113,
    #     45851,
    #     47108,
    #     44940,
    #     86886,
    #     46975,
    #     70350,
    #     85100,
    #     40780,
    #     95133,
    #     30151,
    #     72454,
    #     39999,
    #     68208,
    #     82596,
    #     90062,
    #     91301,
    #     82073,
    #     41557,
    #     60307,
    #     86828,
    #     40241,
    #     89979,
    #     42775,
    #     77698,
    #     73024,
    #     87802,
    #     56952,
    #     48842,
    #     72886,
    #     54904,
    #     52183,
    #     59790,
    #     46035,
    #     54598,
    #     39976,
    #     41859,
    #     55803,
    #     98451,
    #     94693,
    #     97019,
    #     78326,
    #     62621,
    #     63137,
    #     94229,
    #     34044,
    #     51758,
    #     97689,
    #     81374,
    #     36530,
    #     54205,
    #     93621,
    #     70917,
    #     68955,
    #     47832,
    #     31016,
    #     57423,
    #     72128,
    #     38753,
    #     34653,
    #     42743,
    #     91980,
    #     83389,
    #     66833,
    #     80158,
    #     69667,
    #     45929,
    #     32391,
    #     74224,
    #     48886,
    #     51682,
    #     45632,
    #     84094,
    #     79274,
    #     75488,
    #     98794,
    #     88315,
    #     89381,
    #     81313,
    #     57537,
    #     92998,
    #     48018,
    #     51488,
    #     42216,
    #     72636,
    #     37732,
    #     47044,
    #     82948,
    #     76710,
    #     53962,
    #     46741,
    #     98425,
    #     86494,
    #     48872,
    #     35232,
    #     79438,
    #     39861,
    #     30327,
    #     69521,
    #     36781,
    #     98051,
    #     74294,
    #     30774,
    #     30711,
    #     49399,
    #     99175,
    #     67934,
    #     35813,
    #     65067,
    #     91874,
    #     84634,
    #     40130,
    #     79334,
    #     31040,
    #     35714,
    #     45071,
    #     92463,
    #     36199,
    #     47834,
    #     49445,
    #     92898,
    #     51649,
    #     81997,
    #     33854,
    #     65573,
    #     96808,
    #     73779,
    #     86046,
    #     35476,
    #     97231,
    #     30163,
    #     33583,
    #     88996,
    #     75062,
    #     87810,
    #     43834,
    #     59272,
    #     61306,
    #     77654,
    #     95195,
    #     83337,
    #     97016,
    #     82631,
    #     86733,
    #     42676,
    #     58377,
    #     77865,
    #     91353,
    #     49096,
    #     49483,
    #     73347,
    #     31014,
    #     47743,
    #     42906,
    #     71510,
    #     30094,
    #     71186,
    #     33834,
    #     59724,
    #     88771,
    #     37271,
    #     88484,
    #     37688,
    #     91062,
    #     35949,
    #     34860,
    #     98197,
    #     74192,
    #     50472,
    #     66834,
    #     47107,
    #     56861,
    #     48006,
    #     36550,
    #     55646,
    #     78901,
    #     68415,
    #     49014,
    #     55607,
    #     53363,
    #     58636,
    #     61233,
    #     99925,
    #     64979,
    #     32807,
    #     36842,
    #     50920,
    #     79934,
    #     67225,
    #     56161,
    #     57851,
    #     41432,
    #     87390,
    #     35344,
    #     66911,
    #     54536,
    #     57834,
    #     46318,
    #     83601,
    #     37810,
    #     51914,
    #     92378,
    #     96273,
    #     38962,
    #     70905,
    #     52632,
    #     64347,
    #     59883,
    #     37977,
    #     80787,
    #     86362,
    #     70802,
    #     90887,
    #     44301,
    #     81989,
    #     63578,
    #     56035,
    #     30319,
    #     65086,
    #     35984,
    #     76823,
    #     97974,
    #     40730,
    #     50694,
    #     89874,
    #     32449,
    #     77343,
    #     98894,
    #     38069,
    #     49543,
    #     71250,
    #     68628,
    #     49816,
    #     60437,
    #     33822,
    #     60573,
    #     72414,
    #     47568,
    #     35569,
    #     64248,
    #     45510,
    #     70247,
    #     84790,
    #     98900,
    #     43029,
    #     60135,
    #     79234,
    #     43824,
    #     65345,
    #     92934,
    #     50160,
    #     62918,
    #     82997,
    #     89944,
    #     31007,
    #     82002,
    #     79061,
    #     84743,
    #     41812,
    #     37117,
    #     66207,
    #     48035,
    #     32892,
    #     30878,
    #     76699,
    #     32741,
    #     71481,
    #     51973,
    #     73793,
    #     42096,
    #     53919,
    #     81521,
    #     73278,
    #     72976,
    #     46149,
    #     51997,
    #     77924,
    #     74868,
    #     76321,
    #     77631,
    #     90645,
    #     65075,
    #     36528,
    #     90911,
    #     75008,
    #     91272,
    #     83682,
    #     85849,
    #     59048,
    #     48134,
    #     66364,
    #     76894,
    #     63360,
    #     31484,
    #     40057,
    #     43754,
    #     47544,
    #     57353,
    #     84576,
    #     38619,
    #     40405,
    #     98314,
    #     96682,
    #     79560,
    #     35953,
    #     30510,
    #     60236,
    #     99154,
    #     55062,
    #     31486,
    #     54300,
    #     34628,
    #     98846,
    #     40976,
    #     85046,
    #     42803,
    #     82508,
    #     44560,
    #     70952,
    #     85733,
    #     95556,
    #     88574,
    #     81094,
    #     68969,
    #     94864,
    #     87897,
    #     77462,
    #     93174,
    #     83705,
    #     97126,
    #     31642,
    #     47470,
    #     98059,
    #     37143,
    #     58727,
    #     96618,
    #     92280,
    #     79424,
    #     64758,
    #     63556,
    #     91473,
    #     36070,
    #     60349,
    #     44131,
    #     70110,
    #     61840,
    #     39777,
    #     56077,
    #     55766,
    #     61741,
    #     93192,
    #     62980,
    #     66060,
    #     80601,
    #     45773,
    #     78866,
    #     38630,
    #     88505,
    #     60237,
    #     79960,
    #     91984,
    #     54563,
    #     66527,
    #     69232,
    #     87804,
    #     46109,
    #     44723,
    #     41958,
    #     54750,
    #     35404,
    #     97823,
    #     48209,
    #     57820,
    #     59676,
    #     94427,
    #     32619,
    #     42783,
    #     47153,
    #     63426,
    #     54737,
    #     65873,
    #     44434,
    #     59572,
    #     95111,
    #     46476,
    #     82173,
    #     62104,
    #     70926,
    #     65186,
    #     57062,
    #     77010,
    #     93643,
    #     33175,
    #     59704,
    #     68163,
    #     91475,
    #     78723,
    #     64120,
    #     47708,
    #     48595,
    #     84981,
    #     55316,
    #     43499,
    #     43718,
    #     30407,
    #     46689,
    #     47668,
    #     77437,
    #     76618,
    #     66581,
    #     56978,
    #     51199,
    #     74890,
    #     73420,
    #     83543,
    #     46775,
    #     62792,
    #     79819,
    #     35062,
    #     49856,
    #     57631,
    #     47403,
    #     36074,
    #     77405,
    #     45308,
    #     69325,
    #     52920,
    #     63219,
    #     64628,
    #     94114,
    #     30997,
    #     70718,
    #     82901,
    #     33060,
    #     57993,
    #     93742,
    #     61417,
    #     73321,
    #     60374,
    #     93659,
    #     30748,
    #     31056,
    #     34562,
    #     95490,
    #     49527,
    #     94345,
    #     86322,
    #     39944,
    #     39517,
    #     41768,
    #     77619,
    #     66383,
    #     75176,
    #     53467,
    #     76626,
    #     55057,
    #     58370,
    #     78945,
    #     88047,
    #     40760,
    #     92402,
    #     54174,
    #     30614,
    #     34622,
    #     88847,
    #     88892,
    #     87715,
    #     33289,
    #     56983,
    #     60016,
    #     41336,
    #     99759,
    #     85285,
    #     68998,
    #     55667,
    #     48165,
    #     75253,
    #     64683,
    #     80170,
    #     68995,
    #     69809,
    #     79841,
    #     57363,
    #     44660,
    #     76459,
    #     92982,
    #     58562,
    #     93922,
    #     55698,
    #     78106,
    #     34038,
    #     69430,
    #     48579,
    #     74567,
    #     67953,
    #     61961,
    #     68088,
    #     82077,
    #     62924,
    #     99365,
    #     53830,
    #     90914,
    #     52951,
    #     72608,
    #     41908,
    #     70961,
    #     88140,
    #     84219,
    #     71941,
    #     95055,
    #     57666,
    #     57595,
    #     80575,
    #     74020,
    #     63233,
    #     37176,
    #     45976,
    #     52804,
    #     98457,
    #     41427,
    #     68647,
    #     67818,
    #     70758,
    #     63034,
    #     50745,
    #     67738,
    #     76365,
    #     67062,
    #     97981,
    #     59488,
    #     46284,
    #     60031,
    #     64721,
    #     69684,
    #     75237,
    #     76742,
    #     94930,
    #     54165,
    #     38831,
    #     91832,
    #     91009,
    #     32022,
    #     66169,
    #     61906,
    #     33188,
    #     79899,
    #     81595,
    #     67625,
    #     98179,
    #     82817,
    #     40303,
    #     77043,
    #     84279,
    #     72743,
    #     74941,
    #     69917,
    #     67093,
    #     31153,
    #     94252,
    #     37717,
    #     48882,
    #     96134,
    #     43036,
    #     82236,
    #     31680,
    #     33827,
    #     61045,
    #     32697,
    #     92633,
    #     59317,
    #     90069,
    #     75007,
    #     94034,
    #     66713,
    #     97395,
    #     53859,
    #     72028,
    #     97692,
    #     42489,
    #     30588,
    #     77576,
    #     82415,
    #     31704,
    #     30483,
    #     50635,
    #     71462,
    #     37056,
    #     71656,
    #     64545,
    #     81569,
    #     74326,
    #     51847,
    #     52869,
    #     70880,
    #     99287,
    #     37883,
    #     59141,
    #     92112,
    #     56340,
    #     55991,
    #     98334,
    #     68602,
    #     47349,
    #     60524,
    #     70000,
    #     32911,
    #     33129,
    #     41157,
    #     84012,
    #     97509,
    #     82052,
    #     57911,
    #     47961,
    #     81772,
    #     75316,
    #     88790,
    #     82280,
    #     77206,
    #     62418,
    #     85341,
    #     60020,
    #     69141,
    #     42841,
    #     33966,
    #     80535,
    #     56353,
    #     35455,
    #     47483,
    #     86574,
    #     74565,
    #     94308,
    #     89767,
    #     71409,
    #     74633,
    #     30749,
    #     49962,
    #     35036,
    #     44357,
    #     45847,
    #     77460,
    #     84010,
    #     45007,
    #     43425,
    #     72285,
    #     59315,
    #     70382,
    #     50574,
    #     40114,
    #     80264,
    #     50413,
    #     63303,
    #     98308,
    #     89316,
    #     41694,
    #     30966,
    #     91396,
    #     38138,
    #     86064,
    #     92332,
    #     85996,
    #     71634,
    #     40567,
    #     55185,
    #     52267,
    #     73591,
    #     57360,
    #     55634,
    #     77587,
    #     42995,
    #     61239,
    #     72874,
    #     70597,
    #     85710,
    #     81031,
    #     80655,
    #     86239,
    #     46565,
    #     41446,
    #     64635,
    #     75353,
    #     53893,
    #     35492,
    #     66210,
    #     57427,
    #     98681,
    #     69183,
    #     96347,
    #     34619,
    #     74818,
    #     50758,
    #     52598,
    #     73521,
    #     68735,
    #     35795,
    #     74851,
    #     32249,
    #     88026,
    #     32976,
    #     32403,
    #     72503,
    #     35276,
    # ]

    # technicians = [
    #     1000025,
    #     1000002,
    #     1000052,
    #     1000019,
    #     1000079,
    #     1000029,
    #     1000086,
    #     1000061,
    #     1000030,
    #     1000019,
    #     1000028,
    #     1000057,
    # ]

    # record_1 = {
    #     "registration_number": gen.random_word_from_list(list_of_levators_numbers),
    #     "done_maintenance_date": gen.create_utc_datetime_min_max(0, 1),
    #     "failure": {
    #         "failure_registered": {
    #             "registration_date": gen.create_utc_datetime(1),
    #             "problem_description": lorem.get_sentence(count=2, word_range=(1, 3)),
    #         },
    #         "failure_fixed": {
    #             "failure_fixed_date": gen.create_utc_datetime(1),
    #             "problem_description": lorem.get_sentence(count=2, word_range=(1, 3)),
    #         },
    #     },
    #     "technician_ident_number": gen.random_word_from_list(technicians),
    # }
    # # record_2 = {
    # #     "failure": {
    # #         "failure_fixed": {"failure_fixed_date": " ", "problem_description": " "}
    # #     }
    # # }
    # # record_3 = {"registration_number": " "}
    # # record_4 = {"done_maintenance_date": " "}
    # # record_5 = {"technician_ident_number": " "}
    # for _ in range(1, 150):
    #     a = querying.create_database_one_record(record_1)
    #     print(a)

    # equals_or_less = querying.filter_by_less_than_equal(field_name="quantity", value=1)
    # print("Less or more ------>", equals_or_less, end="\n")

    # categories_in = ["bass", "stork"]
    # filter_by_in = querying.filter_by_in(field_name="name", value=categories_in)
    # print("Filter by in ------>", filter_by_in, end="\n")

    # categories_in = ["bass", "stork"]
    # filter_by_in = querying.filter_by_not_in(field_name="name", value=categories_in)
    # print("Filter by not in------>", filter_by_in, end="\n")

    # filter_by = querying.filter_fields({"name": 1, "weight": 1, "born_date": 1})
    # print(filter_by)
